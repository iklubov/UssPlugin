{
  parserClass="org.intellij.sdk.language.parser.UssParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Uss"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  elementTypeHolderClass="org.intellij.sdk.language.psi.UssTypes"
  elementTypeClass="org.intellij.sdk.language.psi.UssElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.UssTokenType"

  psiImplUtilClass="org.intellij.sdk.language.psi.impl.UssPsiImplUtil"
}

ussFile ::= item_*

//private item_ ::= comment | newline | token
private item_ ::= comment | newline | token | replace_definition_token | css_definition_token

comment ::= COMMENT_EXPR

newline ::= CRLF

separator_expr ::= SEPARATOR

replace_definition_token ::= REPLACE_START SEPARATOR ELEMENT_NAME SEPARATOR* EMPTY_TOKEN (SEPARATOR|newline)* {REPLACE_SIMPLE_CONTENT | ({binding_token|no_params_binding_token|property_binding_token|style_token|params_token|class_token|special_token|comment|separator_expr|newline}*)} {SEPARATOR|newline}* REPLACE_END

// EMPTY TOKEN NOT ALWAYS NEEDED
css_definition_token ::= L_PARENTHESIS CSS SEPARATOR CLASS_NAME SEPARATOR*  EMPTY_TOKEN* SEPARATOR* ({style_param|separator_expr|comment}+) R_PARENTHESIS

special_token ::= L_PARENTHESIS SPECIAL_IDENTIFIER (REPLACE_INSIDE_PARAMS|SEPARATOR)* R_PARENTHESIS

//TODO DOUBLEQUOTE LEVEL UP
// BINDING PARAMS CAN BE WITHOUT DOUBLE QUOTE
binding_token ::= L_PARENTHESIS BINDING SEPARATOR {BINDING_NAME | BINDING_PROP | BINDING_PROP_FUNCTION} SEPARATOR ({DOUBLE_QUOTE ({ WORD | SEPARATOR }+) DOUBLE_QUOTE} | WORD | BINDING_PROP) ({SEPARATOR|CRLF}*) R_PARENTHESIS

no_params_binding_token ::= L_PARENTHESIS BINDING SEPARATOR NO_PARAMS_BINDING SEPARATOR* R_PARENTHESIS

property_binding_token ::= L_PARENTHESIS BINDING SEPARATOR ({DOUBLE_QUOTE ({ WORD | SEPARATOR }+) DOUBLE_QUOTE} | BINDING_PROP) R_PARENTHESIS

class_token ::= L_PARENTHESIS CLASS SEPARATOR CLASS_NAME R_PARENTHESIS

style_param ::= L_PARENTHESIS {ELEMENT_NAME | STYLE_PARAM_SPECIAL} SEPARATOR ({ HEX_NUMBER | WORD_INSIDE_QUOTE | SCREEN_SCALE | PERCENTAGE_NUMBER | STYLE_PARAM_SPECIAL | STYLE_PIXEL_PARAM | FRACTIONAL_NUMBER | CLASS_NAME | SEPARATOR }+) R_PARENTHESIS

style_token ::= L_PARENTHESIS STYLE SEPARATOR ({style_param|separator_expr|comment}+) R_PARENTHESIS

//css_token ::= L_PARENTHESIS CSS SEPARATOR ({comment}+) R_PARENTHESIS

params_token ::= L_PARENTHESIS PARAMS SEPARATOR ({style_param|separator_expr}+) R_PARENTHESIS

replace_token ::= REPLACE_EXPRESSION L_PARENTHESIS (REPLACE_INSIDE_PARAMS*) R_PARENTHESIS

//TODO remove movieclip from here
block_token ::=  L_PARENTHESIS {BLOCK | TEXT_FIELD | HBLOCK | MOVIECLIP | UBLOCK} SEPARATOR MOVIECLIP_NAME* SEPARATOR* ({block_token|binding_token|no_params_binding_token|property_binding_token|style_token|params_token|class_token|comment|replace_token|separator_expr|special_token|newline}*) R_PARENTHESIS

token ::= L_PARENTHESIS ELEMENT SEPARATOR ELEMENT_NAME SEPARATOR* L_PARENTHESIS ELEMENT_NAME* R_PARENTHESIS ({block_token|binding_token|no_params_binding_token|property_binding_token|style_token|params_token|class_token|special_token|comment|replace_token|separator_expr|newline}*) R_PARENTHESIS | L_PARENTHESIS R_PARENTHESIS


// todo needed for ussLexer support

word_expr ::= (WORD | DOUBLE_QUOTE | EMPTY_TOKEN | COLON | VIRGULE)+
//
service ::= ELEMENT | BLOCK | CSS | BINDING | IMPORT | CLASS | STYLE | SPECIAL_IDENTIFIER
//
name_expr ::= ELEMENT_NAME | BINDING_NAME | BINDING_PROP | NO_PARAMS_BINDING | BINDING_PROP_FUNCTION | CLASS_NAME
//
//token_fill ::= service|name_expr|separator_expr|word_expr|newline

//block_expr ::= L_PARENTHESIS BLOCK SEPARATOR({block_expr}+)R_PARENTHESIS | L_PARENTHESIS R_PARENTHESIS

//token ::= L_PARENTHESIS({token|token_fill}+)R_PARENTHESIS | L_PARENTHESIS R_PARENTHESIS






